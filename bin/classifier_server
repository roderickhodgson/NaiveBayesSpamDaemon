#!/usr/bin/env python
import sys
from optparse import OptionParser
import pika
from NaiveBayesSpamDaemon.classifier import NaiveBayesOptionParser, NaiveBayesDaemonClassifier as nbc

def main():
    parser = NaiveBayesOptionParser()
    (options, args) = parser.parse_args()

    try:
        connection = pika.BlockingConnection(pika.ConnectionParameters(
            host='localhost'))
    except pika.exceptions.AMQPConnectionError:
        print "ERROR: Could not connect to AMQP server. Is an AMQP server running?"
        sys.exit(1)

    channel = connection.channel()

    channel.queue_declare(queue='naive_bayes_rpc_queue')

    classifier = nbc(options)

    def on_request(ch, method, props, body):
        response = classifier.is_message_spam(body)
        print " [x] Message found to be %s" % ("spam" if response==True else "ham")

        ch.basic_publish(exchange='',
                         routing_key=props.reply_to,
                         properties=pika.BasicProperties(correlation_id = \
                                                         props.correlation_id),
                         body=str(response))
        ch.basic_ack(delivery_tag = method.delivery_tag)

    channel.basic_qos(prefetch_count=1)
    channel.basic_consume(on_request, queue='naive_bayes_rpc_queue')

    print " [x] Awaiting RPC requests"
    channel.start_consuming()

if __name__=='__main__':
    main()
